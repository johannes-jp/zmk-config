/*
 * Copyright (c) 2021-2022 The ZMK Contributors
 *
 * SPDX-License-Identifier: MIT
 */

#include "../zmk-nodefree-config/helper.h"
#include "../zmk-nodefree-config/international_chars/swedish.dtsi"
#include <behaviors.dtsi>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/ext_power.h>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/outputs.h>

#define COLEMK_L 0
#define QWERTY_L 1
#define DVORAK_L 2
#define NAV_L    3
#define SYM_L    4
#define ADJ_L    5
#define Undo   LC(Z)
#define Cut    LC(X)
#define Copy   LC(C)
#define Paste  LC(V)
#define Redo   LC(Y)

&mt {
    flavor = "hold-preferred";
    tapping-term-ms = <200>;
    require-prior-idle-ms = <125>;
};

/ {
    behaviors {
        // home row shift
        //        lh_pht: lh_pht {
        //            compatible = "zmk,behavior-hold-tap";
        //            label = "LH_PHT";
        //            bindings = <&kp>, <&kp>;
        //
        //            #binding-cells = <2>;
        //            tapping-term-ms = <100>;
        //            quick-tap-ms = <200>;
        //            flavor = "tap-unless-interrupted";
        //            hold-trigger-key-positions = <6 7 8 9 10 11 18 19 20 21 22 23 32 33 34 35 31>;
        //        };
        //
        //        rh_pht: rh_pht {
        //            compatible = "zmk,behavior-hold-tap";
        //            label = "RH_PHT";
        //            bindings = <&kp>, <&kp>;
        //
        //            #binding-cells = <2>;
        //            tapping-term-ms = <100>;
        //            quick-tap-ms = <200>;
        //            flavor = "tap-unless-interrupted";
        //            hold-trigger-key-positions = <0 1 2 3 4 5 12 13 14 15 16 17 24 25 26 27 28 29 44 42>;
        //        };

        hold_while_undecided: hold_while_undecided {
            compatible = "zmk,behavior-hold-tap";
            label = "HOLD_WHILE_UNDECIDED";
            bindings = <&kp>, <&kp>;

            #binding-cells = <2>;
            tapping-term-ms = <200>;
            require-prior-idle-ms = <125>;
            hold-while-undecided;
        };
    };

    combos {
        compatible = "zmk,combos";

        ModplusLayer {
            bindings = <&mo 5>;
            key-positions = <44 45>;
        };

        is_thorn {
            bindings = <&is_thorn>;
            key-positions = <16 33>;
            require-prior-idle-ms = <200>;
        };

        is_eth {
            bindings = <&is_eth>;
            key-positions = <25 33>;
            require-prior-idle-ms = <200>;
        };

        is_aa {
            bindings = <&is_aa>;
            key-positions = <0 13>;
            require-prior-idle-ms = <200>;
        };

        is_ea {
            bindings = <&is_ea>;
            key-positions = <0 20>;
            require-prior-idle-ms = <200>;
        };

        is_ia {
            bindings = <&is_ia>;
            key-positions = <0 21>;
            require-prior-idle-ms = <200>;
        };

        is_oa {
            bindings = <&is_oa>;
            key-positions = <0 22>;
            require-prior-idle-ms = <200>;
        };

        is_ua {
            bindings = <&is_ua>;
            key-positions = <0 8>;
            require-prior-idle-ms = <200>;
        };

        is_ya {
            bindings = <&is_ya>;
            key-positions = <0 9>;
            require-prior-idle-ms = <200>;
        };

        is_ae {
            bindings = <&is_ae>;
            key-positions = <13 20>;
            require-prior-idle-ms = <200>;
        };

        is_od {
            bindings = <&is_od>;
            key-positions = <22 35>;
            require-prior-idle-ms = <200>;
        };

        is_ad {
            bindings = <&is_ad>;
            key-positions = <13 35>;
            require-prior-idle-ms = <200>;
        };

        is_ao {
            bindings = <&is_ao>;
            key-positions = <13 22>;
            require-prior-idle-ms = <200>;
        };
    };

    keymap {
        compatible = "zmk,keymap";

        colemak_layer {
            /* COLEMAK-DH
 * -------------------------------------------------------------------------------------------------------------------------------------
 * | `     |   Q   |   W   |   F   |   P   |   B   |-----------------------------------|   J   |   L   |   U   |   Y   |   ;   | BKSPC |
 * | TAB   |   A   |   R   |   S   |   T   |   G   |-----------------------------------|   M   |   N   |   E   |   I   |   O   | ENTER |
 * | SHIFT |   Z   |   X   |   C   |   D   |   V   |   '   |-------------------|   /   |   K   |   H   |   ,   |   .   |  Up   | SHIFT |
 * | Mute  |  ESC  | CTRL  |-------|  GUI  |  ALT  |SK SHFT|  Nav  |---|  Sym  | SPACE |  ALT  |  GUI  |-------| Left  | Down  | Right |
 */

            bindings = <
&kp GRAVE  &kp Q    &kp W         &kp F  &kp P              &kp B                                                                                                              &kp J     &kp L     &kp U      &kp Y     &kp SEMI  &kp BSPC
&kp TAB    &kp A    &kp R         &kp S  &kp T              &kp G                                                                                                              &kp M     &kp N     &kp E      &kp I     &kp O     &kp ENTER
&mo 3      &kp Z    &kp X         &kp C  &kp D              &kp V               &mt LEFT_ALT APOSTROPHE                                                 &kp SLASH              &kp K     &kp H     &kp COMMA  &kp DOT   &kp UP    &kp RSHFT
&kp RCTRL  &kp ESC  &kp LEFT_WIN         &kp LS(LA(LCTRL))  &lt 3 LEFT_BRACKET  &hold_while_undecided LEFT_SHIFT SPACE  &mt LCTRL RIGHT_BRACKET  &mo 4  &mt RIGHT_SHIFT SPACE  &kp LALT  &kp RGUI             &kp LEFT  &kp DOWN  &kp RIGHT
            >;

            sensor-bindings = <&inc_dec_kp C_VOL_UP C_VOL_DN &inc_dec_kp PG_UP PG_DN>;
        };

        dvorak_layer {
            /* DVORAK
 * -------------------------------------------------------------------------------------------------------------------------------------
 * | `     |   '   |   ,   |   .   |   P   |   Y   |-----------------------------------|   F   |   G   |   C   |   R   |   L   | BKSPC |
 * | TAB   |   A   |   O   |   E   |   U   |   I   |-----------------------------------|   D   |   H   |   T   |   N   |   S   | ENTER |
 * | SHIFT |   ;   |   Q   |   J   |   K   |   X   |   Z   |-------------------|   /   |   B   |   M   |   W   |   V   |  Up   | SHIFT |
 * | Mute  |  ESC  | CTRL  |-------|  GUI  |  ALT  |SK SHFT|  Nav  |---|  Sym  | SPACE |  ALT  |  GUI  |-------| Left  | Down  | Right |
 */

            bindings = <
&kp GRAVE   &kp SQT   &kp COMMA  &kp DOT  &kp P     &kp Y                                          &kp F     &kp G     &kp C  &kp R     &kp L     &kp BSPC
&kp TAB     &kp A     &kp O      &kp E    &kp U     &kp I                                          &kp D     &kp H     &kp T  &kp N     &kp S     &kp ENTER
&kp LSHFT   &kp SEMI  &kp Q      &kp J    &kp K     &kp X     &kp Z                     &kp SLASH  &kp B     &kp M     &kp W  &kp V     &kp UP    &kp RSHFT
&kp C_MUTE  &kp ESC   &kp LCTRL           &kp LGUI  &kp LALT  &sk LSHIFT  &mo 4  &mo 4  &kp SPACE  &kp LALT  &kp RGUI         &kp LEFT  &kp DOWN  &kp RIGHT
            >;

            sensor-bindings = <&inc_dec_kp C_VOL_UP C_VOL_DN &inc_dec_kp PG_UP PG_DN>;
        };

        qwerty_layer {
            /* QWERTY
 * -------------------------------------------------------------------------------------------------------------------------------------
 * | `     |   Q   |   W   |   E   |   R   |   T   |-----------------------------------|   Y   |   U   |   I   |   O   |   P   | BKSPC |
 * | TAB   |   A   |   S   |   D   |   F   |   G   |-----------------------------------|   H   |   J   |   K   |   L   |   ;   | ENTER |
 * | SHIFT |   Z   |   X   |   C   |   V   |   B   |   '   |-------------------|   /   |   N   |   M   |   ,   |   .   |  Up   | SHIFT |
 * | Mute  |  ESC  | CTRL  |-------|  GUI  |  ALT  |SK SHFT|  Nav  |---|  Sym  | SPACE |  ALT  |  GUI  |-------| Left  | Down  | Right |
 */

            bindings = <
&kp GRAVE   &kp Q    &kp W      &kp E  &kp R     &kp T                                          &kp Y     &kp U     &kp I      &kp O     &kp P     &kp BSPC
&kp TAB     &kp A    &kp S      &kp D  &kp F     &kp G                                          &kp H     &kp J     &kp K      &kp L     &kp SEMI  &kp ENTER
&kp LSHFT   &kp Z    &kp X      &kp C  &kp V     &kp B     &kp SQT                   &kp SLASH  &kp N     &kp M     &kp COMMA  &kp DOT   &kp UP    &kp RSHFT
&kp C_MUTE  &kp ESC  &kp LCTRL         &kp LGUI  &kp LALT  &sk LSHIFT  &mo 4  &mo 4  &kp SPACE  &kp LALT  &kp RGUI             &kp LEFT  &kp DOWN  &kp RIGHT
            >;

            sensor-bindings = <&inc_dec_kp C_VOL_UP C_VOL_DN &inc_dec_kp PG_UP PG_DN>;
        };

        num_layer {
            /* NAV
 * -------------------------------------------------------------------------------------------------------------------------------------
 * | Copy  |   1   |   2   |   3   |   4   |   5   |-----------------------------------|   6   |   7   |   8   |   9   |   0   | BSPC  |
 * | Cut   |  GUI  |  Alt  | Ctrl  | Shift | Paste |-----------------------------------| PG UP |  Left |  Up   |  Down | Right | PG DN |
 * | Shift |  F1   |  F2   |  F3   |  F4   |  F5   |  UnDo |-------------------| ReDo  |  F6   |  F7   |  F8   |  F9   |  F10  | Shift |
 * | F11   |  F12  |       |-------|       |       |       |       |---| ADJ_L |       |       |       |-------| CTRL  | HOME  |  END  |
 */

            bindings = <
&kp BACKSPACE  &kp EQUAL         &kp N7      &kp N8  &kp N9  &kp N0                                       &trans    &kp F5    &kp F6  &kp F7      &kp F8            &kp PG_UP
&kp BACKSLASH  &kp MINUS         &kp N4      &kp N5  &kp N6  &kp SLASH                                    &kp HOME  &kp LEFT  &kp UP  &kp DOWN    &kp RIGHT         &kp END
&kp COMMA      &kp PERIOD        &kp N1      &kp N2  &kp N3  &kp ASTRK  &kp DEL                 &kp Redo  &trans    &kp F1    &kp F2  &kp F3      &kp F4            &kp PG_DN
&kp C_PREV     &kp C_PLAY_PAUSE  &kp C_NEXT          &trans  &trans     &trans   &trans  &mo 5  &trans    &trans    &trans            &kp C_PREV  &kp C_PLAY_PAUSE  &kp C_NEXT
            >;

            sensor-bindings = <&inc_dec_kp PG_UP PG_DN &inc_dec_kp C_VOL_UP C_VOL_DN>;
        };

        sym_layer {
            /* SYM
 * -------------------------------------------------------------------------------------------------------------------------------------
 * | INS   |   !   |   @   |   #   |   $   |   %   |-----------------------------------|   ^   |   &   |   *   |   (   |   )   | DELETE|
 * | CAPS  |   \   |   -   |   =   |   [   |   ]   |-----------------------------------| Vol+  | Shift | Ctrl  | Alt   | Gui   | ENTER |
 * | Shift |   |   |   _   |   +   |   {   |   }   | Play  |-------------------| Mute  | Vol-  |  N0   |  N1   |  N2   |       | SHIFT |
 * |       |       |       |-------|       |       |       |  ADJ_L |---|      |       |       |       |-------| CTRL  | MENU  |SkAltGr|
 */

            bindings = <
&kp INS     &kp EXCL  &kp AT     &kp HASH   &kp DOLLAR  &kp PERCENT                                       &kp CARET     &kp AMPS   &kp ASTRK  &kp LPAR   &kp RPAR   &kp DEL
&caps_word  &kp BSLH  &kp MINUS  &kp EQUAL  &kp LBKT    &kp RBKT                                          &kp C_VOL_UP  &kp RSHFT  &kp RCTRL  &kp LALT   &kp RGUI   &trans
&trans      &kp PIPE  &kp UNDER  &kp PLUS   &kp LBRC    &kp RBRC     &kp C_PP                 &kp C_MUTE  &kp C_VOL_DN  &kp N0     &kp N1     &kp N2     &none      &trans
&none       &none     &trans                &trans      &trans       &trans    &mo 5  &trans  &trans      &trans        &trans                &kp RCTRL  &kp K_APP  &sk RALT
            >;

            sensor-bindings = <&inc_dec_kp PG_UP PG_DN &inc_dec_kp C_VOL_UP C_VOL_DN>;
        };

        adj_layer {
            /* ADJUST
 * -------------------------------------------------------------------------------------------------------------------------------------
 * |       | QWERTY| DVORAK| COLEMK|       |       |-----------------------------------|       |Prt Scr|       | EP_OFF| EP_ON |       |
 * |       | BT 0  | BT 1  | BT 2  | BT 3  | BT 4  |-----------------------------------|       |       |       |       |       |       |
 * | BOOTL | RESET |       |OUT_USB|OUT_BLE|       |BT CLR |-------------------|       |       |       |       |       |       | SHIFT |
 * ----------------|       |-------|       |       |       |       |---|       |       |       |       |-------| CTRL  |----------------
 */

            bindings = <
&none        &to 3         &to 4         &to 0         &none         &none                                             &none   &kp PRINTSCREEN  &none  &ext_power EP_OFF  &ext_power EP_ON  &none
&none        &bt BT_SEL 0  &bt BT_SEL 1  &bt BT_SEL 2  &bt BT_SEL 3  &bt BT_SEL 4                                      &none   &none            &none  &none              &none             &none
&bootloader  &sys_reset    &none         &out OUT_USB  &out OUT_BLE  &none         &bt BT_CLR                  &none   &none   &none            &none  &none              &none             &trans
&none        &none         &trans                      &trans        &trans        &trans      &trans  &trans  &trans  &trans  &trans                  &kp RCTRL          &none             &none
            >;

            sensor-bindings = <&inc_dec_kp C_VOL_UP C_VOL_DN &inc_dec_kp PG_UP PG_DN>;
        };
    };
};
