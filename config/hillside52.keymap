/*
 * Copyright (c) 2021-2022 The ZMK Contributors
 *
 * SPDX-License-Identifier: MIT
 */

#include "../zmk-nodefree-config/helper.h"

// #include "../zmk-nodefree-config/international_chars/nordic.dtsi"

#include <behaviors.dtsi>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/ext_power.h>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/outputs.h>

#define COLEMK_L 0
#define QWERTY_L 1
#define DVORAK_L 2
#define NAV_L    3
#define SYM_L    4
#define ADJ_L    5
#define Undo   LC(Z)
#define Cut    LC(X)
#define Copy   LC(C)
#define Paste  LC(V)
#define Redo   LC(Y)

ZMK_UNICODE_PAIR(no_aa,   N0, N0, E,  N1,   N0, N0, C,  N1)
ZMK_UNICODE_PAIR(no_ea,   N0, N0, E,  N9,   N0, N0, C,  N9)
ZMK_UNICODE_PAIR(no_ia,   N0, N0, E,  D,    N0, N0, C,  D)
ZMK_UNICODE_PAIR(no_oa,   N0, N0, F,  N3,   N0, N0, D,  N3)
ZMK_UNICODE_PAIR(no_ua,   N0, N0, F,  A,    N0, N0, D,  A)
ZMK_UNICODE_PAIR(no_ya,   N0, N0, F,  D,    N0, N0, D,  D)
ZMK_UNICODE_PAIR(no_ae,   N0, N0, E,  N6,   N0, N0, C,  N6)
ZMK_UNICODE_PAIR(no_od,   N0, N0, F,  N6,   N0, N0, D,  N6)
ZMK_UNICODE_PAIR(no_ad,   N0, N0, E,  N4,   N0, N0, C,  N4)
ZMK_UNICODE_PAIR(no_thorn,  N0, N0, F,  E,  N0, N0, D,  E)
ZMK_UNICODE_PAIR(no_eth,  N0, N0, F,  N0,   N0, N0, D,  N0)
ZMK_UNICODE_PAIR(no_ao,   N0, N0, E,  N5,   N0, N0, C,  N5)

&mt {
    flavor = "hold-preferred";
    tapping-term-ms = <150>;
    require-prior-idle-ms = <125>;
};

/ {
    behaviors {
        hold_while_undecided: hold_while_undecided {
            compatible = "zmk,behavior-hold-tap";
            label = "HOLD_WHILE_UNDECIDED";
            bindings = <&kp>, <&kp>;

            #binding-cells = <2>;
            tapping-term-ms = <200>;
            require-prior-idle-ms = <125>;
            hold-while-undecided;
        };

        lt_chars: lt_chars {
            compatible = "zmk,behavior-hold-tap";
            label = "LT_CHARS";
            bindings = <&to>, <&kp>;

            #binding-cells = <2>;
            flavor = "tap-preferred";
            tapping-term-ms = <150>;
            require-prior-idle-ms = <150>;
            hold-trigger-key-positions = <0>;
        };
    };

    combos {
        compatible = "zmk,combos";

        ModplusLayer {
            bindings = <&mo 5>;
            key-positions = <44 45>;
        };

        thorn {
            bindings = <&no_thorn>;
            key-positions = <16 33>;
            require-prior-idle-ms = <200>;
            timeout-ms = <50>;
        };

        eth {
            bindings = <&no_eth>;
            key-positions = <25 33>;
            require-prior-idle-ms = <200>;
        };

        aa {
            bindings = <&no_aa>;
            key-positions = <0 13>;
            require-prior-idle-ms = <200>;
        };

        ea {
            bindings = <&no_ea>;
            key-positions = <0 20>;
            require-prior-idle-ms = <200>;
        };

        ia {
            bindings = <&no_ia>;
            key-positions = <0 21>;
            require-prior-idle-ms = <200>;
        };

        oa {
            bindings = <&no_oa>;
            key-positions = <0 22>;
            require-prior-idle-ms = <200>;
        };

        ua {
            bindings = <&no_ua>;
            key-positions = <0 8>;
            require-prior-idle-ms = <200>;
        };

        ya {
            bindings = <&no_ya>;
            key-positions = <0 9>;
            require-prior-idle-ms = <200>;
        };

        ae {
            bindings = <&no_ae>;
            key-positions = <13 20>;
            require-prior-idle-ms = <200>;
        };

        od {
            bindings = <&no_od>;
            key-positions = <22 35>;
            require-prior-idle-ms = <200>;
        };

        ad {
            bindings = <&no_ad>;
            key-positions = <13 35>;
            require-prior-idle-ms = <200>;
        };

        ao {
            bindings = <&no_ao>;
            key-positions = <13 22>;
            require-prior-idle-ms = <200>;
        };

        to_gaming {
            bindings = <&to 6>;
            key-positions = <1 2 3 4>;
        };

        to_qwerty {
            bindings = <&to 2>;
            key-positions = <25 26 27 28>;
        };

        to_colemak {
            bindings = <&to 0>;
            key-positions = <13 14 15 16>;
        };

        power_toys_layout_1 {
            bindings = <&kp LG(LA(LC(N1)))>;
            key-positions = <40 41 19>;
        };

        power_toys_layout_2 {
            bindings = <&kp LA(LC(LG(N2)))>;
            key-positions = <40 41 20>;
        };

        power_toys_layout_3 {
            bindings = <&kp LA(LC(LG(N3)))>;
            key-positions = <40 41 21>;
        };

        power_toys_layout_4 {
            bindings = <&kp LA(LC(LG(N4)))>;
            key-positions = <40 41 22>;
        };
    };

    keymap {
        compatible = "zmk,keymap";

        colemak_layer {
            /* COLEMAK-DH
 * -------------------------------------------------------------------------------------------------------------------------------------
 * | `     |   Q   |   W   |   F   |   P   |   B   |-----------------------------------|   J   |   L   |   U   |   Y   |   ;   | BKSPC |
 * | TAB   |   A   |   R   |   S   |   T   |   G   |-----------------------------------|   M   |   N   |   E   |   I   |   O   | ENTER |
 * | SHIFT |   Z   |   X   |   C   |   D   |   V   |   '   |-------------------|   /   |   K   |   H   |   ,   |   .   |  Up   | SHIFT |
 * | Mute  |  ESC  | CTRL  |-------|  GUI  |  ALT  |SK SHFT|  Nav  |---|  Sym  | SPACE |  ALT  |  GUI  |-------| Left  | Down  | Right |
 */

            bindings = <
&lt_chars 7 GRAVE  &kp Q       &kp W         &kp F  &kp P              &kp B                                                                                                                    &kp J     &kp L     &kp U      &kp Y       &kp SEMI  &kp BSPC
&mt LG(TAB) TAB    &kp A       &kp R         &kp S  &kp T              &kp G                                                                                                                    &kp M     &kp N     &kp E      &kp I       &kp O     &kp ENTER
&kp BACKSPACE      &kp Z       &kp X         &kp C  &kp D              &kp V               &mt LEFT_ALT APOSTROPHE                                                                   &kp SLASH  &kp K     &kp H     &kp COMMA  &kp PERIOD  &kp UP    &kp RSHFT
&kp DELETE         &kp ESCAPE  &kp LEFT_WIN         &kp LS(LA(LCTRL))  &lt 3 LEFT_BRACKET  &hold_while_undecided LEFT_SHIFT SPACE  &hold_while_undecided LCTRL RIGHT_BRACKET  &mo 4  &kp SPACE  &kp LALT  &kp RGUI             &kp LEFT    &kp DOWN  &kp RIGHT
            >;

            //            sensor-bindings = <&inc_dec_kp C_VOL_UP C_VOL_DN &inc_dec_kp PG_UP PG_DN>;
        };

        dvorak_layer {
            /* DVORAK
 * -------------------------------------------------------------------------------------------------------------------------------------
 * | `     |   '   |   ,   |   .   |   P   |   Y   |-----------------------------------|   F   |   G   |   C   |   R   |   L   | BKSPC |
 * | TAB   |   A   |   O   |   E   |   U   |   I   |-----------------------------------|   D   |   H   |   T   |   N   |   S   | ENTER |
 * | SHIFT |   ;   |   Q   |   J   |   K   |   X   |   Z   |-------------------|   /   |   B   |   M   |   W   |   V   |  Up   | SHIFT |
 * | Mute  |  ESC  | CTRL  |-------|  GUI  |  ALT  |SK SHFT|  Nav  |---|  Sym  | SPACE |  ALT  |  GUI  |-------| Left  | Down  | Right |
 */

            bindings = <
&kp GRAVE   &kp SQT   &kp COMMA  &kp DOT  &kp P     &kp Y                                          &kp F     &kp G     &kp C  &kp R     &kp L     &kp BSPC
&kp TAB     &kp A     &kp O      &kp E    &kp U     &kp I                                          &kp D     &kp H     &kp T  &kp N     &kp S     &kp ENTER
&kp LSHFT   &kp SEMI  &kp Q      &kp J    &kp K     &kp X     &kp Z                     &kp SLASH  &kp B     &kp M     &kp W  &kp V     &kp UP    &kp RSHFT
&kp C_MUTE  &kp ESC   &kp LCTRL           &kp LGUI  &kp LALT  &sk LSHIFT  &mo 4  &mo 4  &kp SPACE  &kp LALT  &kp RGUI         &kp LEFT  &kp DOWN  &kp RIGHT
            >;

            //            sensor-bindings = <&inc_dec_kp C_VOL_UP C_VOL_DN &inc_dec_kp PG_UP PG_DN>;
        };

        qwerty_layer {
            /* QWERTY
 * -------------------------------------------------------------------------------------------------------------------------------------
 * | `     |   Q   |   W   |   E   |   R   |   T   |-----------------------------------|   Y   |   U   |   I   |   O   |   P   | BKSPC |
 * | TAB   |   A   |   S   |   D   |   F   |   G   |-----------------------------------|   H   |   J   |   K   |   L   |   ;   | ENTER |
 * | SHIFT |   Z   |   X   |   C   |   V   |   B   |   '   |-------------------|   /   |   N   |   M   |   ,   |   .   |  Up   | SHIFT |
 * | Mute  |  ESC  | CTRL  |-------|  GUI  |  ALT  |SK SHFT|  Nav  |---|  Sym  | SPACE |  ALT  |  GUI  |-------| Left  | Down  | Right |
 */

            bindings = <
&kp GRAVE   &kp Q    &kp W         &kp E  &kp R              &kp T                                                                                                                &kp Y     &kp U     &kp I      &kp O     &kp P     &kp BSPC
&kp TAB     &kp A    &kp S         &kp D  &kp F              &kp G                                                                                                                &kp H     &kp J     &kp K      &kp L     &kp SEMI  &kp ENTER
&kp LSHFT   &kp Z    &kp X         &kp C  &kp V              &kp B               &mt LEFT_ALT SQT                                                                      &kp SLASH  &kp N     &kp M     &kp COMMA  &kp DOT   &kp UP    &kp RSHFT
&kp C_MUTE  &kp ESC  &kp LEFT_GUI         &kp LS(LA(LCTRL))  &lt 3 LEFT_BRACKET  &hold_while_undecided LSHIFT SPACE  &hold_while_undecided LCTRL RIGHT_BRACKET  &mo 4  &kp SPACE  &kp LALT  &kp RGUI             &kp LEFT  &kp DOWN  &kp RIGHT
            >;

            //            sensor-bindings = <&inc_dec_kp C_VOL_UP C_VOL_DN &inc_dec_kp PG_UP PG_DN>;
        };

        num_layer {
            /* NAV
 * -------------------------------------------------------------------------------------------------------------------------------------
 * | Copy  |   1   |   2   |   3   |   4   |   5   |-----------------------------------|   6   |   7   |   8   |   9   |   0   | BSPC  |
 * | Cut   |  GUI  |  Alt  | Ctrl  | Shift | Paste |-----------------------------------| PG UP |  Left |  Up   |  Down | Right | PG DN |
 * | Shift |  F1   |  F2   |  F3   |  F4   |  F5   |  UnDo |-------------------| ReDo  |  F6   |  F7   |  F8   |  F9   |  F10  | Shift |
 * | F11   |  F12  |       |-------|       |       |       |       |---| ADJ_L |       |       |       |-------| CTRL  | HOME  |  END  |
 */

            bindings = <
&kp BACKSPACE  &kp EQUAL         &kp N7      &kp N8  &kp N9  &kp N0                                       &trans    &kp F5    &kp F6  &kp F7      &kp F8            &kp PG_UP
&kp BACKSLASH  &kp MINUS         &kp N4      &kp N5  &kp N6  &kp SLASH                                    &kp HOME  &kp LEFT  &kp UP  &kp DOWN    &kp RIGHT         &kp END
&kp COMMA      &kp PERIOD        &kp N1      &kp N2  &kp N3  &kp ASTRK  &kp DEL                 &kp Redo  &trans    &kp F1    &kp F2  &kp F3      &kp F4            &kp PG_DN
&kp C_PREV     &kp C_PLAY_PAUSE  &kp C_NEXT          &trans  &trans     &trans   &trans  &mo 5  &trans    &trans    &trans            &kp C_PREV  &kp C_PLAY_PAUSE  &kp C_NEXT
            >;

            //            sensor-bindings = <&inc_dec_kp PG_UP PG_DN &inc_dec_kp C_VOL_UP C_VOL_DN>;
        };

        sym_layer {
            /* SYM
 * -------------------------------------------------------------------------------------------------------------------------------------
 * | INS   |   !   |   @   |   #   |   $   |   %   |-----------------------------------|   ^   |   &   |   *   |   (   |   )   | DELETE|
 * | CAPS  |   \   |   -   |   =   |   [   |   ]   |-----------------------------------| Vol+  | Shift | Ctrl  | Alt   | Gui   | ENTER |
 * | Shift |   |   |   _   |   +   |   {   |   }   | Play  |-------------------| Mute  | Vol-  |  N0   |  N1   |  N2   |       | SHIFT |
 * |       |       |       |-------|       |       |       |  ADJ_L |---|      |       |       |       |-------| CTRL  | MENU  |SkAltGr|
 */

            bindings = <
&kp INS     &kp EXCL  &kp AT     &kp HASH   &kp DOLLAR  &kp PERCENT                                       &kp CARET     &kp AMPS   &kp ASTRK  &kp LPAR   &kp RPAR   &kp DEL
&caps_word  &kp BSLH  &kp MINUS  &kp EQUAL  &kp LBKT    &kp RBKT                                          &kp C_VOL_UP  &kp RSHFT  &kp RCTRL  &kp LALT   &kp RGUI   &trans
&trans      &kp PIPE  &kp UNDER  &kp PLUS   &kp LBRC    &kp RBRC     &kp C_PP                 &kp C_MUTE  &kp C_VOL_DN  &kp N0     &kp N1     &kp N2     &none      &trans
&none       &none     &trans                &trans      &trans       &trans    &mo 5  &trans  &trans      &trans        &trans                &kp RCTRL  &kp K_APP  &sk RALT
            >;

            //            sensor-bindings = <&inc_dec_kp PG_UP PG_DN &inc_dec_kp C_VOL_UP C_VOL_DN>;
        };

        adj_layer {
            /* ADJUST
 * -------------------------------------------------------------------------------------------------------------------------------------
 * |       | QWERTY| DVORAK| COLEMK|       |       |-----------------------------------|       |Prt Scr|       | EP_OFF| EP_ON |       |
 * |       | BT 0  | BT 1  | BT 2  | BT 3  | BT 4  |-----------------------------------|       |       |       |       |       |       |
 * | BOOTL | RESET |       |OUT_USB|OUT_BLE|       |BT CLR |-------------------|       |       |       |       |       |       | SHIFT |
 * ----------------|       |-------|       |       |       |       |---|       |       |       |       |-------| CTRL  |----------------
 */

            bindings = <
&none        &to 3         &to 4         &to 0         &none         &none                                             &none   &kp PRINTSCREEN  &none  &ext_power EP_OFF  &ext_power EP_ON  &none
&none        &bt BT_SEL 0  &bt BT_SEL 1  &bt BT_SEL 2  &bt BT_SEL 3  &bt BT_SEL 4                                      &none   &none            &none  &none              &none             &none
&bootloader  &sys_reset    &none         &out OUT_USB  &out OUT_BLE  &none         &bt BT_CLR                  &none   &none   &none            &none  &none              &none             &trans
&none        &none         &trans                      &trans        &trans        &trans      &trans  &trans  &trans  &trans  &trans                  &kp RCTRL          &none             &none
            >;

            //            sensor-bindings = <&inc_dec_kp C_VOL_UP C_VOL_DN &inc_dec_kp PG_UP PG_DN>;
        };

        gaming_layer {
            bindings = <
&kp GRAVE          &kp LEFT_ALT    &kp Q         &kp W  &kp E              &kp R                                                                    &kp J         &kp F9       &kp F10  &kp F11   &kp F12   &kp BSPC
&kp TAB            &kp LEFT_SHIFT  &kp A         &kp S  &kp D              &kp F                                                                    &kp C_VOL_UP  &kp F5       &kp F6   &kp F7    &kp F8    &kp ENTER
&kp LS(LA(LCTRL))  &kp LCTRL       &kp Z         &kp X  &kp C              &kp V  &mt LS(LEFT_ALT) APOSTROPHE                     &kp C_AL_MUSIC    &kp C_VOL_DN  &kp F1       &kp F2   &kp F3    &kp UP    &kp F4
&mo 4              &kp ESC         &kp LEFT_WIN         &kp LS(LA(LCTRL))  &mo 3  &kp SPACE                    &kp I  &kp C_PREV  &kp C_PLAY_PAUSE  &kp C_NEXT    &kp C_PAUSE           &kp LEFT  &kp DOWN  &kp RIGHT
            >;
        };

        gui_layer {
            bindings = <
&trans  &kp LA(F4)  &kp LG(D)   &kp LG(E)   &kp LG(LC(LA(LS(LEFT))))  &kp LG(LC(LA(LS(RIGHT))))                                                    &trans  &kp LG(LC(LA(N1)))  &kp LG(LA(N2))  &kp LG(LC(LA(N3)))  &kp LG(LC(LA(N4)))  &kp LG(LC(LS(LA(LEFT))))
&trans  &trans      &kp LG(N1)  &kp LG(N2)  &kp LG(N3)                &kp LG(N4)                                                                   &trans  &kp LG(H)           &kp LG(J)       &kp LG(K)           &kp LG(L)           &kp LG(LC(LS(RIGHT)))
&trans  &trans      &trans      &trans      &mt LC(F4) LG(LC(D))      &trans                     &trans                                    &trans  &trans  &trans              &trans          &trans              &kp LG(UP_ARROW)    &trans
&trans  &trans      &trans                  &trans                    &kp LG(LC(LEFT))           &kp LA(SPACE)  &kp LC(LG(RIGHT))  &trans  &trans  &trans  &trans                              &kp LG(LEFT)        &kp LG(DOWN)        &kp LG(RIGHT)
            >;
        };
    };
};
